{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Speedrun APIS Documentation A python library to work with the speedrun.com API Version = 0.3.1 Read about the methods here: users , and here: games . Known Issues No currently known issues TODO Categories (started) Guests Leaderboards (started) Notifications Profile Errors (started) Translation for the ids If you have any questions or suggestions please feel free to contact me about them, for issues please report them on the project repository","title":"Home"},{"location":"#speedrun-apis-documentation","text":"A python library to work with the speedrun.com API Version = 0.3.1 Read about the methods here: users , and here: games .","title":"Speedrun APIS Documentation"},{"location":"#known-issues","text":"No currently known issues","title":"Known Issues"},{"location":"#todo","text":"Categories (started) Guests Leaderboards (started) Notifications Profile Errors (started) Translation for the ids","title":"TODO"},{"location":"#if-you-have-any-questions-or-suggestions-please-feel-free-to-contact-me-about-them-for-issues-please-report-them-on-the-project-repository","text":"","title":"If you have any questions or suggestions please feel free to contact me about them, for issues please report them on the project repository"},{"location":"game/","text":"Games Speedrun.com allows you to query for game data, the game class allows you to get this data using this library. To initialize a game object you use the following code replacing Minecraft: Java Edition with the name of the game you are looking for, and replacing game with the variable name you want associated with the game inputed. The class takes one parameter, the name of a game stored as a string in a variable or a string, 0 or 2+ parameters entered will give a type error. game = speedrunapi.Game('Minecraft: Java Edition') Great! You have set up a game object, now its time to do operations on that game object. To do opperations on a game, just add one of the supported operations to the game object. If you do the opperation id to the game it will return the id of the game put into the program. >>> print(game.id) j1npme6p Or you can do it directly to the game object. >>> print(speedrunapi.Game('Minecraft: Java Edition').id) j1npme6p Currently supported operations: lookup: Returns the game data of the game as a dictionary format_name: Returns the games name but formated to be used in the links as a string id: Returns the id of the game as a string abbreviation: Returns the abbreviation of the game as a string release_date: Returns the release date of the game as a string ruleset: Returns the ruleset of the game as dictionary regions: Returns the region ids of the game as a dictionary (can be []) platforms: Returns the platform ids of the game as a dictionary (can be []) genres: Returns the genre ids of the game as a dictionary (can be []) engines: Returns the engin ids of the game as a dictionary (can be []) admins: Returns the developers, publishers, and moderators of the game as a dictionary join_date: Returns the date the game joined speedrun.com as a string runs: Returns the runs of the game as a dictionary levels: Returns the leves of a game as a dictionary categories: Returns the categories of the game as a dictionary variables: Returns the variables of the game as a dictionary records: Returns the records of the game as a dictionary series: Returns the series of the game as a dictionary derived_games: Returns the derived games of the game as a dictionary romhacks: LEGACY VALUE! user derived_games insted, its here just for backwards compatibility leaderboard: Returns the leaderboard of the game for a category as a dictionary (currently adding support for different categories)","title":"Games"},{"location":"game/#games","text":"Speedrun.com allows you to query for game data, the game class allows you to get this data using this library. To initialize a game object you use the following code replacing Minecraft: Java Edition with the name of the game you are looking for, and replacing game with the variable name you want associated with the game inputed. The class takes one parameter, the name of a game stored as a string in a variable or a string, 0 or 2+ parameters entered will give a type error. game = speedrunapi.Game('Minecraft: Java Edition') Great! You have set up a game object, now its time to do operations on that game object. To do opperations on a game, just add one of the supported operations to the game object. If you do the opperation id to the game it will return the id of the game put into the program. >>> print(game.id) j1npme6p Or you can do it directly to the game object. >>> print(speedrunapi.Game('Minecraft: Java Edition').id) j1npme6p","title":"Games"},{"location":"game/#currently-supported-operations","text":"lookup: Returns the game data of the game as a dictionary format_name: Returns the games name but formated to be used in the links as a string id: Returns the id of the game as a string abbreviation: Returns the abbreviation of the game as a string release_date: Returns the release date of the game as a string ruleset: Returns the ruleset of the game as dictionary regions: Returns the region ids of the game as a dictionary (can be []) platforms: Returns the platform ids of the game as a dictionary (can be []) genres: Returns the genre ids of the game as a dictionary (can be []) engines: Returns the engin ids of the game as a dictionary (can be []) admins: Returns the developers, publishers, and moderators of the game as a dictionary join_date: Returns the date the game joined speedrun.com as a string runs: Returns the runs of the game as a dictionary levels: Returns the leves of a game as a dictionary categories: Returns the categories of the game as a dictionary variables: Returns the variables of the game as a dictionary records: Returns the records of the game as a dictionary series: Returns the series of the game as a dictionary derived_games: Returns the derived games of the game as a dictionary romhacks: LEGACY VALUE! user derived_games insted, its here just for backwards compatibility leaderboard: Returns the leaderboard of the game for a category as a dictionary (currently adding support for different categories)","title":"Currently supported operations:"},{"location":"instalation/","text":"Instalation Speedrunapi requires you to have python 3 installed. Link to how to install python: Video The lastest version of python should work for this library In the terminal run the following command to install the library >>> pip install speedrunapi Great! Now the library is installed! To use the libray in your own project, add this code import speedrunapi To simplify the name to something easier to type use the as command to change the package name for your project, as seen below. import speedrunapi as sr Now that you have the library installed and imported you can use it to work with speedrun.com's API! Continue reading about the library and its functions: Users , Games","title":"Instalation"},{"location":"instalation/#instalation","text":"Speedrunapi requires you to have python 3 installed. Link to how to install python: Video The lastest version of python should work for this library In the terminal run the following command to install the library >>> pip install speedrunapi Great! Now the library is installed! To use the libray in your own project, add this code import speedrunapi To simplify the name to something easier to type use the as command to change the package name for your project, as seen below. import speedrunapi as sr Now that you have the library installed and imported you can use it to work with speedrun.com's API! Continue reading about the library and its functions: Users , Games","title":"Instalation"},{"location":"user/","text":"Users Speedrun.com allows you to query for user data, the user class allows you to get this data using this library. To initialize a user object you use the following code replacing fishin_rod with the username you are trying to look for, and replacing user with the variable name you want associated with the user inputed. The class takes one parameter, a username stored as a string in a variable or a string, 0 or 2+ parameters entered will give a type error. user = speedrunapi.User('fishin_rod') Great! You have set up a user object, now its time to do operations on that user object. To do opperations on a user, just add one of the supported operations to the user object. If you do the opperation id to the user it will return the id of the user put into the program. >>> print(user.id) jonryvl8 Or you can do it directly to the user object. >>> print(speedrunapi.User('fishin_rod').id) jonryvl8 Currently supported operations: lookup: Returns the profile data of the user in a dictionary format id: Rreturns the ID of the user as a string name_style: Returns the name style a user has on speedrun.com as a dictonary role: Returns the role of the user as a string signup: Returns the join date of the user as a string in the format Y/M/D H/M/S location: Returns the location of the user as a dictionary containing information about the country and region links: Returns the links the user has listed on their profiles as a list (can be None) runs: Returns the runs the user has submitted in a dictionary format moderated_games: Returns the games the user moderates as a dictionary personal_bests: Returns the personal bests of the user in a dictionary format","title":"Users"},{"location":"user/#users","text":"Speedrun.com allows you to query for user data, the user class allows you to get this data using this library. To initialize a user object you use the following code replacing fishin_rod with the username you are trying to look for, and replacing user with the variable name you want associated with the user inputed. The class takes one parameter, a username stored as a string in a variable or a string, 0 or 2+ parameters entered will give a type error. user = speedrunapi.User('fishin_rod') Great! You have set up a user object, now its time to do operations on that user object. To do opperations on a user, just add one of the supported operations to the user object. If you do the opperation id to the user it will return the id of the user put into the program. >>> print(user.id) jonryvl8 Or you can do it directly to the user object. >>> print(speedrunapi.User('fishin_rod').id) jonryvl8","title":"Users"},{"location":"user/#currently-supported-operations","text":"lookup: Returns the profile data of the user in a dictionary format id: Rreturns the ID of the user as a string name_style: Returns the name style a user has on speedrun.com as a dictonary role: Returns the role of the user as a string signup: Returns the join date of the user as a string in the format Y/M/D H/M/S location: Returns the location of the user as a dictionary containing information about the country and region links: Returns the links the user has listed on their profiles as a list (can be None) runs: Returns the runs the user has submitted in a dictionary format moderated_games: Returns the games the user moderates as a dictionary personal_bests: Returns the personal bests of the user in a dictionary format","title":"Currently supported operations:"}]}